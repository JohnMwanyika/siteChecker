.modal.fade(data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true" id=`monitorModal`)
    .modal-dialog
        .modal-content
            .modal-header
                h5.h5.modal-title(id="monitorModalLabel") Start a new monitor
                button.btn-close.text-dark(type="button" data-bs-dismiss="modal" aria-label="Close")
                    span(aria-hidden="true") Ã—
            .pt-4.modal-body
                form(action="/dashboard/monitoring/start" method="post" id="monitorForm")
                    input(type="hidden" name="_csrf" value=`${csrfToken}`)
                    //- .input-group.input-group-static.mb-4.text-start
                        label Website 
                        input.form-control(id="website" placeholder="in minutes" type="text" disabled onfocus="focused(this)" onfocusout="defocused(this)")
                        //- select.form-control#website-choices(name="siteId" placeholder="Departure")
                            for site in websites
                                option(value=`${site.id}`, selected) #{site.name}

                    .input-group.input-group-static.mb-4.text-start
                        label Select Monitoring Team
                        select.form-control#team-choices2(name="teamId" placeholder="Departure")
                            option(value="" selected)
                            for team in teams
                                option(value=`${team.id}`) #{team.name}

                    .input-group.input-group-static.mb-4
                        label Check Interval
                        input.form-control(id="checkInterval" placeholder="in minutes" name="interval" type="number" onfocus="focused(this)" onfocusout="defocused(this)")

                    .text-end
                        button.m-1.btn.btn-primary#submitbtn2(data-toggle="modal" type="submit" data-target="#jkanban-info-modal")
                            | Save changes 
                            span.spinner-border.spinner-border-sm(role="status" aria-hidden="true")#spinna

                        button.m-1.btn.btn-secondary(type="button" data-bs-dismiss="modal" data-target="#addMonitor").

                            Close
script.
    let loading2 = $('#spinna').hide();

    Toast = Swal.mixin({
        toast: true,
        position: 'top-right',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
        }
    })



    $("#submitbtn2").click(function(event){
        event.preventDefault();
        //- get form
        var form = $("#monitorForm");
        //- make sure empty form is not submitted
        if ($('#team-choices2').val() == "") {
            Toast.fire({
                icon: "error",
                title: "All fields are required"
            });
        }else if ($('#checkInterval').val() < 5 ){
            Toast.fire({
                icon: "error",
                title: "Check interval cannot be less than 5 minutes"
            });
        }else{
            $.ajax({
                url:form.attr('action'),
                type:form.attr('method'),
                data: form.serialize(),
                beforeSend: function(){
                    loading2.show(function(){
                        $("#submitbtn").prop("disabled", true);
                    });
                },
                complete: function(){
                    loading2.hide(function(){
                        $("#submitbtn").removeAttr('disabled');
                    });
                },
                success: function(data){
                    console.log(data.data)
                    if(data.status == "success"){
                        form[0].reset();
                        makeAjaxCall();
                        $('#addMonitor').modal('hide');
                        //- window.location.reload()
                    }
                    Toast.fire({
                        icon:data.status,
                        title:data.data
                    });
                },
                timeout: 10000,
                error: function (request, status, error) {
                    //- alert(request,status);
                    Toast.fire({
                        icon: "error",
                        title: "Request time out try again!"
                    });
                }

            });
        }
    });